// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: routes/service.proto

package customers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersClient interface {
	GetCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error)
	// this returns a stream the client reads until there is
	// more customers.
	GetCustomers(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (Customers_GetCustomersClient, error)
}

type customersClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersClient(cc grpc.ClientConnInterface) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) GetCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerReply, error) {
	out := new(CustomerReply)
	err := c.cc.Invoke(ctx, "/Customers/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCustomers(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (Customers_GetCustomersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Customers_ServiceDesc.Streams[0], "/Customers/GetCustomers", opts...)
	if err != nil {
		return nil, err
	}
	x := &customersGetCustomersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Customers_GetCustomersClient interface {
	Recv() (*CustomerReply, error)
	grpc.ClientStream
}

type customersGetCustomersClient struct {
	grpc.ClientStream
}

func (x *customersGetCustomersClient) Recv() (*CustomerReply, error) {
	m := new(CustomerReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomersServer is the server API for Customers service.
// All implementations must embed UnimplementedCustomersServer
// for forward compatibility
type CustomersServer interface {
	GetCustomer(context.Context, *CustomerRequest) (*CustomerReply, error)
	// this returns a stream the client reads until there is
	// more customers.
	GetCustomers(*GetCustomersRequest, Customers_GetCustomersServer) error
	mustEmbedUnimplementedCustomersServer()
}

// UnimplementedCustomersServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServer struct {
}

func (UnimplementedCustomersServer) GetCustomer(context.Context, *CustomerRequest) (*CustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomersServer) GetCustomers(*GetCustomersRequest, Customers_GetCustomersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedCustomersServer) mustEmbedUnimplementedCustomersServer() {}

// UnsafeCustomersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServer will
// result in compilation errors.
type UnsafeCustomersServer interface {
	mustEmbedUnimplementedCustomersServer()
}

func RegisterCustomersServer(s grpc.ServiceRegistrar, srv CustomersServer) {
	s.RegisterService(&Customers_ServiceDesc, srv)
}

func _Customers_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCustomers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCustomersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomersServer).GetCustomers(m, &customersGetCustomersServer{stream})
}

type Customers_GetCustomersServer interface {
	Send(*CustomerReply) error
	grpc.ServerStream
}

type customersGetCustomersServer struct {
	grpc.ServerStream
}

func (x *customersGetCustomersServer) Send(m *CustomerReply) error {
	return x.ServerStream.SendMsg(m)
}

// Customers_ServiceDesc is the grpc.ServiceDesc for Customers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomer",
			Handler:    _Customers_GetCustomer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCustomers",
			Handler:       _Customers_GetCustomers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routes/service.proto",
}
